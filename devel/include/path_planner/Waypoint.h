// Generated by gencpp from file path_planner/Waypoint.msg
// DO NOT EDIT!


#ifndef PATH_PLANNER_MESSAGE_WAYPOINT_H
#define PATH_PLANNER_MESSAGE_WAYPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace path_planner
{
template <class ContainerAllocator>
struct Waypoint_
{
  typedef Waypoint_<ContainerAllocator> Type;

  Waypoint_()
    : cnt(0)
    , x_arr()
    , y_arr()  {
    }
  Waypoint_(const ContainerAllocator& _alloc)
    : cnt(0)
    , x_arr(_alloc)
    , y_arr(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _cnt_type;
  _cnt_type cnt;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _x_arr_type;
  _x_arr_type x_arr;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _y_arr_type;
  _y_arr_type y_arr;





  typedef boost::shared_ptr< ::path_planner::Waypoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::path_planner::Waypoint_<ContainerAllocator> const> ConstPtr;

}; // struct Waypoint_

typedef ::path_planner::Waypoint_<std::allocator<void> > Waypoint;

typedef boost::shared_ptr< ::path_planner::Waypoint > WaypointPtr;
typedef boost::shared_ptr< ::path_planner::Waypoint const> WaypointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::path_planner::Waypoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::path_planner::Waypoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::path_planner::Waypoint_<ContainerAllocator1> & lhs, const ::path_planner::Waypoint_<ContainerAllocator2> & rhs)
{
  return lhs.cnt == rhs.cnt &&
    lhs.x_arr == rhs.x_arr &&
    lhs.y_arr == rhs.y_arr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::path_planner::Waypoint_<ContainerAllocator1> & lhs, const ::path_planner::Waypoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace path_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::path_planner::Waypoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::path_planner::Waypoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_planner::Waypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::path_planner::Waypoint_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planner::Waypoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::path_planner::Waypoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::path_planner::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b2ba581b0127fa88549ceec9fea43516";
  }

  static const char* value(const ::path_planner::Waypoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb2ba581b0127fa88ULL;
  static const uint64_t static_value2 = 0x549ceec9fea43516ULL;
};

template<class ContainerAllocator>
struct DataType< ::path_planner::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "path_planner/Waypoint";
  }

  static const char* value(const ::path_planner::Waypoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::path_planner::Waypoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 cnt\n"
"float64[] x_arr\n"
"float64[] y_arr\n"
;
  }

  static const char* value(const ::path_planner::Waypoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::path_planner::Waypoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cnt);
      stream.next(m.x_arr);
      stream.next(m.y_arr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Waypoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::path_planner::Waypoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::path_planner::Waypoint_<ContainerAllocator>& v)
  {
    s << indent << "cnt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cnt);
    s << indent << "x_arr[]" << std::endl;
    for (size_t i = 0; i < v.x_arr.size(); ++i)
    {
      s << indent << "  x_arr[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x_arr[i]);
    }
    s << indent << "y_arr[]" << std::endl;
    for (size_t i = 0; i < v.y_arr.size(); ++i)
    {
      s << indent << "  y_arr[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y_arr[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATH_PLANNER_MESSAGE_WAYPOINT_H
